#include<iostream>
#include<ctime>
#include<iomanip>
#include<regex>
#include<mutex>
#include<exception>
#include<vector>
#include<thread>
#include<sstream>
#include<string>
using namespace std;
bool ProvjeriValidnostBrojaTelefona(string telefon) {//globalna funkcija
	/*
	broj telefona treba biti u formatu: +387(61)-222-333
	*/
	string pravilo = "\\+387(\\()\\d{2}(\\))-\\d{3}-\\d{3}";
	if(regex_match(telefon,regex(pravilo)))
	return true;
	return false;
}
enum Predmeti { Matematika, Historija, Geografia, Hemija, Biologija, Engleski, Muzicko, Fizicko };
enum Razredi { I1, I2, I3, II1, II2, II3, III1, III2, III3, IV1, IV2, IV3 };
const char* ispisPredmeti[] = { "Matematika", "Historija", "Geografia", "Hemija", "Biologija", "Engleski", "Muzicko", "Fizicko" };
const char* ispisRazredi[] = { "I1", "I2", "I3", "II1", "II2", "II3", "III1", "III2", "III3", "IV1", "IV2", "IV3" };
const char* crt = "\n---------------------------------------------\n";
template<class T1, class T2>
class Kolekcija {
	T1* _elementi1;
	T2* _elementi2;
	int _trenutno;
public:
	Kolekcija()
	{
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_trenutno = 0;
	}
	Kolekcija(const Kolekcija& k)
	{
		_trenutno = k._trenutno;
		_elementi1 = new T1[k._trenutno];
		_elementi2 = new T2[k._trenutno];
		for (int i = 0; i < _trenutno; i++)
		{
			_elementi1[i] = k._elementi1[i];
			_elementi2[i] = k._elementi2[i];
		}
	}
	Kolekcija& operator=(const Kolekcija& k)
	{
		if (this != &k)
		{
			_trenutno = k._trenutno;
			delete[]_elementi1;
			delete[]_elementi2;
			_elementi1 = new T1[k._trenutno];
			_elementi2 = new T2[k._trenutno];
			for (int i = 0; i < _trenutno; i++)
			{
				_elementi1[i] = k._elementi1[i];
				_elementi2[i] = k._elementi2[i];
			}
		}
		return *this;
	}
	~Kolekcija()
	{
		delete[]_elementi1;
		delete[]_elementi2;
	}
	void AddElement(T1 el1, T2 el2)
	{
		T1* temp1 = new T1[_trenutno + 1];
		T2* temp2 = new T2[_trenutno + 1];
		for (int i = 0; i < _trenutno; i++)
		{
			temp1[i] = _elementi1[i];
			temp2[i] = _elementi2[i];
		}

		delete[]_elementi1;
		delete[]_elementi2;

		_elementi1 = temp1;
		_elementi2 = temp2;

		_elementi1[_trenutno] = el1;
		_elementi2[_trenutno] = el2;

		_trenutno++;
	}
	void RemoveElement(int lokacija)
	{
		if (lokacija < 0 || lokacija == _trenutno)
			return;
		T1* temp1 = new T1[_trenutno - 1];
		T2* temp2 = new T2[_trenutno - 1];
		for (int i = 0,j=0; i < _trenutno; i++)
		{
			if (i != lokacija)
			{
				temp1[j] = _elementi1[i];
				temp2[j] = _elementi2[i];
				j++;
			}
		}
		delete[]_elementi1;
		delete[]_elementi2;

		_elementi1 = temp1;
		_elementi2 = temp2;

		_trenutno--;
	}
	T1 GetElement1(int lokacija)const
	{
		return _elementi1[lokacija];
	}
	T2 GetElement2(int lokacija)const
	{
		return _elementi2[lokacija];
	}
	int GetTrenutno()const
	{
		return _trenutno;
	}
	friend ostream& operator<<(ostream& cout, const Kolekcija& k)
	{
		for (int i = 0; i < k.GetTrenutno(); i++)
		{
			cout << k.GetElement1(i) << " " << k.GetElement2(i) << endl;
		}
		return cout;
	}
};
class Datum {
	int* _dan, * _mjesec, * _godina;
public:
	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}

	Datum(const Datum& obj) {
		_dan = new int(*obj._dan);
		_mjesec = new int(*obj._mjesec);
		_godina = new int(*obj._godina);
	}

	Datum& operator=(const Datum& d)
	{
		if (this != &d)
		{
			*_dan = *d._dan;
			*_mjesec = *d._mjesec;
			*_godina = *d._godina;
		}
		return *this;
	}
	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}
	bool operator==(const Datum& d)
	{
		return *_dan == *d._dan && *_mjesec == *d._mjesec && *_godina == *d._godina;
	}
	friend ostream& operator<< (ostream& COUT, const Datum& obj) {
		COUT << *obj._dan << " " << *obj._mjesec << " " << *obj._godina;
		return COUT;
	}
};
class Osoba {
protected:
	char* _imePrezime;
	Datum* _datumRodjenja;
	string _brojTelefona;
public:
	Osoba(const char* imePrezime, Datum datum) {
		_imePrezime = new char[strlen(imePrezime) + 1];
		strcpy_s(_imePrezime, strlen(imePrezime) + 1, imePrezime);
		_datumRodjenja = new Datum(datum);
		_brojTelefona = "";

	}
	Osoba(const Osoba& obj) :_brojTelefona(obj._brojTelefona) {
		_imePrezime = new char[strlen(obj._imePrezime) + 1];
		strcpy_s(_imePrezime, strlen(obj._imePrezime) + 1, obj._imePrezime);
		_datumRodjenja = new Datum(*obj._datumRodjenja);
	}
	Osoba& operator=(const Osoba& obj)
	{
		if (this != &obj)
		{
			delete[]_imePrezime;
			delete _datumRodjenja;
			_imePrezime = new char[strlen(obj._imePrezime) + 1];
			strcpy_s(_imePrezime, strlen(obj._imePrezime) + 1, obj._imePrezime);
			_datumRodjenja = new Datum(*obj._datumRodjenja);
			_brojTelefona = obj._brojTelefona;
		}
		return *this;
	}
	~Osoba() { delete[]_imePrezime; delete _datumRodjenja; }

	bool setBrojTelefona(string brojTelefona) {
		if (ProvjeriValidnostBrojaTelefona(brojTelefona)) {
			_brojTelefona = brojTelefona;
			return true;
		}
		return false;
	}
	char* getImePrezime()
	{
		return _imePrezime;
	}

};
int Godina(Razredi r)
{
	if (r >= 0 && r < 3)
		return 1;
	else if (r >= 3 && r < 6)
		return 2;
	else if (r >= 6 && r < 9)
		return 3;
	else if (r >= 9 && r < 12)
		return 4;
}
class Nastavnik :public Osoba {
	Kolekcija<Predmeti, Razredi>* _predmetiRazredi;
public:
	Nastavnik(const char*imePrezime,Datum d):Osoba(imePrezime,d)
	{
		_predmetiRazredi = new Kolekcija<Predmeti, Razredi>;
	}
	Nastavnik(const Nastavnik& n):Osoba(n)
	{
		_predmetiRazredi = new Kolekcija<Predmeti, Razredi>(*n._predmetiRazredi);
	}
	Nastavnik& operator=(const Nastavnik& n)
	{
		if (this != &n)
		{
			Osoba::operator=(n);
			delete _predmetiRazredi;
			_predmetiRazredi = new Kolekcija<Predmeti, Razredi>(*n._predmetiRazredi);
		}
		return *this;
	}
	~Nastavnik()
	{
		delete _predmetiRazredi;
		_predmetiRazredi = nullptr;
	}
	bool AddPredmetRazred(Predmeti p,Razredi r)
	{
		int brojac = 0;
		for (int i = 0; i < _predmetiRazredi->GetTrenutno(); i++)
		{
			if (Godina(r) == Godina(_predmetiRazredi->GetElement2(i)) && p == _predmetiRazredi->GetElement1(i))
				brojac++;
			if (brojac >= 2 || p == _predmetiRazredi->GetElement1(i) && r == _predmetiRazredi->GetElement2(i))
				return false;
		}
		_predmetiRazredi->AddElement(p, r);
		return true;
	}
	bool RemovePredmetRazred(Predmeti p)
	{
		for (int i = 0; i < _predmetiRazredi->GetTrenutno(); i++)
		{
			if (p == _predmetiRazredi->GetElement1(i))
			{
				_predmetiRazredi->RemoveElement(i);
				return true;
			}
		}
		return false;
	}
	bool operator==(const Nastavnik& n)
	{
		return strcmp(_imePrezime, n._imePrezime) == 0 && *_datumRodjenja == *n._datumRodjenja;
	}
	Kolekcija<Predmeti, Razredi>& getPredmetiRazredi()
	{
		return *_predmetiRazredi;
	}
	friend ostream& operator<<(ostream& cout, const Nastavnik& n)
	{
		cout << " Ime i prezime -> " << n._imePrezime << endl;
		cout << " Datum rodjenja -> " << *n._datumRodjenja << endl;
		cout << " Broj telefona -> " << n._brojTelefona << endl;
		cout << *n._predmetiRazredi << endl;
		return cout;
	}
};
class Ucenik : public Osoba {
	int _brojUDnevniku;
	Razredi _razred;
	vector<Nastavnik*> _nastavnici;
	Kolekcija<Predmeti, int> _predmetiOcjene;
public:
	Ucenik(const char*imePrezime,Datum d,int broj,Razredi r):Osoba(imePrezime,d)
	{
		_brojUDnevniku = broj;
		_razred = r;
	}
	Ucenik(const Ucenik& u):Osoba(u)
	{
		_brojUDnevniku = u._brojUDnevniku;
		_razred = u._razred;
		_nastavnici = u._nastavnici;
		_predmetiOcjene = u._predmetiOcjene;
	}
	bool AddNastavnik(Nastavnik& n)
	{
		for (int i = 0; i < _nastavnici.size(); i++)
		{
			if (n == *_nastavnici[i])
				return false;
		}
		for (int i = 0; i < n.getPredmetiRazredi().GetTrenutno(); i++)
		{
			if (_razred == n.getPredmetiRazredi().GetElement2(i))
			{
				_nastavnici.push_back(&n);
				return true;
			}
		}
		return false;
	}
	bool AddPredmetOcjenu(Predmeti p, int ocjena)
	{
		for (int i = 0; i < _nastavnici.size(); i++)
		{
			for (int j = 0; j < _nastavnici[i]->getPredmetiRazredi().GetTrenutno(); j++)
			{
				if (p == _nastavnici[i]->getPredmetiRazredi().GetElement1(j))
				{
					_predmetiOcjene.AddElement(p, ocjena);
					return true;
				}
			}
		}
		return false;
	}
	vector<Nastavnik*>&getNastavnici()
	{
		return _nastavnici;
	}
	Kolekcija<Predmeti, int>&getPredmetiOcjene()
	{
		return _predmetiOcjene;
	}
	float GetProsjekByNastavnik(const char* imePrezime)
	{
		float prosjek = 0;
		int brojac = 0;
		for (int i = 0; i <_nastavnici.size() ; i++)
		{
			if (strcmp(imePrezime, _nastavnici[i]->getImePrezime()) == 0)
			{
				for (int j = 0; j < _nastavnici[i]->getPredmetiRazredi().GetTrenutno(); j++)
				{
					for (int k = 0; k < _predmetiOcjene.GetTrenutno(); k++)
					{
						if (_nastavnici[i]->getPredmetiRazredi().GetElement1(j) == _predmetiOcjene.GetElement1(k))
						{
							prosjek += _predmetiOcjene.GetElement2(k);
							brojac++;
						}
					}
				}
				return prosjek / brojac;
			}
		}
		return 0;
	}
	friend ostream& operator<<(ostream& cout, const Ucenik& u)
	{
		cout << "Ime i prezime -> " << u._imePrezime << endl;
		cout << " Datum rodjenja -> " << *u._datumRodjenja << endl;
		cout << " Broj u dnevniku -> " << u._brojUDnevniku << endl;
		cout << " Razred -> " << u._razred << endl;
		cout << " Nastavnici -> " << endl;
		for (int i = 0; i < u._nastavnici.size(); i++)
		{
			cout << *u._nastavnici[i] << endl;
		}
		cout << u._predmetiOcjene << endl;
		return cout;
	}
};


void main() {

	/****************************************************************************
	1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
	2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR CE BITI OZNACENO KAO "RE"
	3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA
	4. PROGRAMSKI CODE SE TAKODJER NALAZI U FAJLU CODE_.TXT
	5. NAZIV I LISTA PARAMETARA FUNKCIJA MORAJU BITI IDENTIČNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U.
	6. NIJE POTREBNO BACATI IZUZETKE. SVE FUNKCIJE VRACAJU TRUE ILI FALSE
	****************************************************************************/

#pragma region TestiranjeDatuma
	Datum danas(26, 11, 2015);
	Datum sutra(danas);
	Datum prekosutra;
	prekosutra = danas;
	cout << danas << endl << sutra << endl << prekosutra << crt;
#pragma endregion
#pragma region TestiranjeKolekcije
	Kolekcija<int, int> kolekcija1;
	int brojElemenata = 15;
	for (size_t i = 0; i < brojElemenata; i++)
		kolekcija1.AddElement(i, i);
	cout << kolekcija1 << endl;
	kolekcija1.RemoveElement(0);//uklanja element na osnovu lokacije
	cout << kolekcija1.GetElement1(0) << " " << kolekcija1.GetElement2(0) << endl;
	cout << kolekcija1 << endl;
	Kolekcija<int, int> kolekcija2;
	kolekcija2 = kolekcija1;
	cout << kolekcija2 << crt;
	if (kolekcija1.GetTrenutno() == kolekcija2.GetTrenutno())
		cout << "ISTI BROJ ELEMENATA" << endl;
	Kolekcija<int, int> kolekcija3(kolekcija2);
	cout << kolekcija3 << crt;
#pragma endregion
#pragma region TestiranjeNastavnika
	Nastavnik jasmin("Jasmin Azemovic", Datum(15, 2, 1980));
	Nastavnik adel("Adel Handzic", Datum(15, 10, 1981));
	/*NASTAVNIK MOZE PREDAVATI ISTI PREDMET, ALI TO MORA BITI U RAZLICITIM ODJELJENJIMA I NAJVISE U DVA RAZREDA 
	(NA DVIJE RAZLICITE GODINE)*/
	if (jasmin.AddPredmetRazred(Matematika, I1))
		cout << "Predmeti dodan" << endl;
	if (jasmin.AddPredmetRazred(Matematika, I1))
		cout << "Predmeti dodan" << endl;
	if (jasmin.AddPredmetRazred(Matematika, I2))
		cout << "Predmeti dodan" << endl;
	if (jasmin.AddPredmetRazred(Matematika, I3))
		cout << "Predmeti dodan" << endl;
	if (jasmin.AddPredmetRazred(Historija, I1))
		cout << "Predmeti dodan" << endl;

	if (jasmin.AddPredmetRazred(Geografia, I1))
		cout << "Predmeti dodan" << endl;

	if (jasmin.AddPredmetRazred(Geografia, I2))
		cout << "Predmeti dodan" << endl;

	if (adel.AddPredmetRazred(Historija, III1))
		cout << "Predmeti dodan" << endl;

	/*if (adel.RemovePredmetRazred(Historija))
		cout << "Predmet uklonjen!" << endl;*/

	Nastavnik goran(adel);
	if (goran == adel)
		cout << "Nastavnici identicni" << endl;
	goran = jasmin;
	if (goran == jasmin)
		cout << "Nastavnici identicni" << endl;

	Kolekcija<Predmeti, Razredi>& predmetiRazredi = jasmin.getPredmetiRazredi();

	if (!jasmin.setBrojTelefona("+38761111222"))
		cout << "Broj telefona nije dodan!" << endl;
	if (!jasmin.setBrojTelefona("+387-61-111-222"))
		cout << "Broj telefona nije dodan!" << endl;
	if (jasmin.setBrojTelefona("+387(61)-111-222"))
		cout << "Broj telefona uspjesno dodan!" << endl;
#pragma endregion

#pragma region TestiranjeUcenika
	Ucenik denis("Denis Music", Datum(8, 10, 1990), 3, III1);
	Ucenik elmin("Elmin Sudic", Datum(15, 6, 1993), 1, I1);
	Ucenik adil("Adil Joldic", Datum(13, 8, 1992), 2, II1);
	/*VODITI RACUNA DA SE DODAJU REFERENCE NA NASTAVNIKE KAKO BI SVI UCENICI DIJELILI ISTE INFORMACIJE O NASTAVNICIMA U 
	SLUCAJU DA SE NASTAVNIKU DODA NEKI PREDMET*/
	/*ZA USPJESNO DODAVANJE, NASTAVNIK MORA POSJEDOVATI (PREDAVATI) NAJMANJE JEDAN PREDMET U TOM RAZREDU */
	if (denis.AddNastavnik(jasmin))
		cout << "Nastavnik uspjesno dodan" << endl;
	/*ONEMOGUCITI DODAVANJE ISTIH NASTAVNIKA; POJAM ISTI PODRAZUMIJEVA IDENTICNE VRIJEDNOSTI SVIH ATRIBUTA*/
	if (denis.AddNastavnik(adel))
		cout << "Nastavnik uspjesno dodan" << endl;
	/*DA BI SE DODALA OCJENA ZA ODREDJENI PREDMET UCENIK MORA POSJEDOVATI NASTAVNIKA KOJI PREDAJE TAJ PREDMET*/
	if (denis.AddPredmetOcjenu(Matematika, 3))
		cout << "Ocjena uspjesno dodana" << endl;
	if (denis.AddPredmetOcjenu(Historija, 4))
		cout << "Ocjena uspjesno dodana" << endl;

	vector<Nastavnik*>& nastavnici = denis.getNastavnici();
	cout << "Ucenik Denis ima dodijeljena " << nastavnici.size() << " nastavnika" << endl;

	Kolekcija<Predmeti, int>& uspjeh = denis.getPredmetiOcjene();
	cout << "Denis ima " << uspjeh.GetTrenutno() << " polozenih predmeta" << endl;
	cout << "Prosjecna ocjena kod nastavnika Jasmin Azemovic je " << denis.GetProsjekByNastavnik("Jasmin Azemovic") << endl;

	Ucenik denis2(denis);
	cout << denis2 << endl;

#pragma endregion
	system("pause");
}