#include<iostream>
#include<regex>
#include<iomanip>
#include<ctime>
#include<exception>
#include<mutex>
#include<thread>
#include<vector>
#include<sstream>
#include<string>
using namespace std;
const char* crt = "\n---------------------------------------\n";

class DatumVrijeme {
	int* _dan, * _mjesec, * _godina, * _sati, * _minuti;
public:
	DatumVrijeme(int dan = 1, int mjesec = 1, int godina = 2000, int sati = 0, int minuti = 0) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
		_sati = new int(sati);
		_minuti = new int(minuti);

	}
	DatumVrijeme(const DatumVrijeme& dv)
	{
		_dan = new int(*dv._dan);
		_mjesec = new int(*dv._mjesec);
		_godina = new int(*dv._godina);
		_sati = new int(*dv._sati);
		_minuti = new int(*dv._minuti);
	}
	DatumVrijeme& operator=(const DatumVrijeme& dv)
	{
		if (this != &dv)
		{
			*_dan = *dv._dan;
			*_mjesec = *dv._mjesec;
			*_godina = *dv._godina;
			*_sati = *dv._sati;
			*_minuti = *dv._minuti;
		}
		return *this;
	}
	~DatumVrijeme() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
		delete _sati; _sati = nullptr;
		delete _minuti; _minuti = nullptr;

	}
	bool operator==(const DatumVrijeme& dv)
	{
		return (*_dan * 24 + *_mjesec * 720 + *_godina * 8640 + *_sati) == (*dv._dan * 24 + *dv._mjesec * 720 + *dv._godina * 8640 + *dv._sati);
	}
	friend ostream& operator<< (ostream& COUT, DatumVrijeme& obj) {
		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina << " " << *obj._sati << ":" << *obj._minuti;
		return COUT;
	}
};

template<class T1, class T2 = int>
class FITKolekcija {
	T1* _elementi1;
	T2* _elementi2;
	int _trenutno;
public:
	FITKolekcija() {
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_trenutno = 0;
	}
	FITKolekcija(const FITKolekcija& k)
	{
		_trenutno = k._trenutno;
		_elementi1 = new T1[_trenutno];
		_elementi2 = new T2[_trenutno];
		for (int i = 0; i < _trenutno; i++)
		{
			_elementi1[i] = k._elementi1[i];
			_elementi2[i] = k._elementi2[i];
		}
	}
	FITKolekcija& operator=(const FITKolekcija& k)
	{
		if (this != &k)
		{
			_trenutno = k._trenutno;
			delete[]_elementi1;
			delete[]_elementi2;
			_elementi1 = new T1[_trenutno];
			_elementi2 = new T2[_trenutno];
			for (int i = 0; i < _trenutno; i++)
			{
				_elementi1[i] = k._elementi1[i];
				_elementi2[i] = k._elementi2[i];
			}
		}
		return *this;
	}
	~FITKolekcija() {
		delete[] _elementi1; _elementi1 = nullptr;
		delete[] _elementi2; _elementi2 = nullptr;
	}
	T1* GetT1() { return _elementi1; }
	T2* GetT2() { return _elementi2; }
	int GetTrenutno()const { return _trenutno; }
	void Dodaj(T1 el1, T2 el2)
	{
		T1* temp1 = new T1[_trenutno + 1];
		T2* temp2 = new T2[_trenutno + 1];
		for (int i = 0; i < _trenutno; i++)
		{
			temp1[i] = _elementi1[i];
			temp2[i] = _elementi2[i];
		}
		delete[]_elementi1;
		delete[]_elementi2;

		_elementi1 = temp1;
		_elementi2 = temp2;

		_elementi1[_trenutno] = el1;
		_elementi2[_trenutno] = el2;
		_trenutno++;
	}
	void Sortiraj()
	{
		bool promjena = true;
		while (promjena)
		{
			promjena = false;
			for (int i = 0; i < _trenutno-1; i++)
			{
				if (_elementi1[i] > _elementi1[i + 1])
				{
					swap(_elementi1[i], _elementi1[i + 1]);
					swap(_elementi2[i], _elementi2[i + 1]);
					promjena = true;
				}
			}
		}
	}
	void DodajNaLokaciju(T1 el1, T2 el2, int lokacija)
	{
		T1* temp1 = new T1[_trenutno + 1];
		T2* temp2 = new T2[_trenutno + 1];
		for (int i = 0,j=0; i < _trenutno; i++,j++)
		{
			if (i == lokacija)
			{
				temp1[j] = el1;
				temp2[j] = el2;
				j++;
			}
			temp1[j] = _elementi1[i];
			temp2[j] = _elementi2[i];
		}
		delete[]_elementi1;
		delete[]_elementi2;

		_elementi1 = temp1;
		_elementi2 = temp2;
		_trenutno++;
	}
	FITKolekcija<T1,T2>* GetJedinstveni()
	{
		FITKolekcija<T1, T2>* k = new FITKolekcija<T1, T2>;
		bool dodaj = true;
		for (size_t i = 0; i < _trenutno; i++)
		{
			dodaj = true;
			for (size_t j = 0; j < k->GetTrenutno(); j++)
			{
				if (k->GetT1()[j] == _elementi1[i] && k->GetT2()[j] == _elementi2[i]) {
					dodaj = false;
				}
			}
			if (dodaj)
				k->Dodaj(_elementi1[i], _elementi2[i]);
		}
		return k;
	}
	friend ostream& operator<< (ostream& COUT, FITKolekcija& obj) {
		for (size_t i = 0; i < obj._trenutno; i++)
			COUT << obj._elementi1[i] << " " << obj._elementi2[i] << endl;
		return COUT;
	}
};

enum vrstaDokumenta { PDF, DOC, TXT, HTML };
bool ProvjeriValidnostNazivaDokumenta(string naziv)
{
	string pravilo = "\\w{5,15}\\.(doc|pdf|txt|html)";
	if (regex_match(naziv, regex(pravilo)))
		return true;
	return false;
}
class Dokument {
	vrstaDokumenta _vrsta;
	string _naziv;
	string _sadrzaj;
	int _brojStranica;
public:
	Dokument() { _brojStranica = 0; }
	Dokument(vrstaDokumenta vrsta, string naziv) {
		_naziv = naziv; _vrsta = vrsta; _brojStranica = 0;
	}
	vrstaDokumenta GetVrsta() { return _vrsta; };
	void UvecajBrojStranica() { _brojStranica++; }
	int GetBrojStranica() { return _brojStranica; }
	void DodajSadrzaj(string sadrzaj)
	{
		int broj_stranica = 0;
		int znakova = strlen(sadrzaj.c_str());
		/*if (znakova % 30 == 0)
			broj_stranica = 0;
		else
			broj_stranica = 1;*/
		while (znakova > 0)
		{
			znakova-=30;
			broj_stranica++;
		}
		_sadrzaj += sadrzaj;
		_brojStranica = broj_stranica;
	}
	string getNaziv()
	{
		return _naziv;
	}
	string getSadrzaj()
	{
		return _sadrzaj;
	}
	int getBrojStranica()
	{
		return _brojStranica;
	}
	friend ostream& operator<<(ostream& COUT, Dokument& obj) {
		COUT << obj._naziv << "." << obj._vrsta << " (" << obj._brojStranica << ")\n" << obj._sadrzaj << endl;
		return COUT;
	}
};
class Uredjaj {
protected:
	char* _proizvodjac;
	char* _model;
public:
	Uredjaj(const char* proizvodjac, const char* model) {
		int vel = strlen(proizvodjac) + 1;
		_proizvodjac = new char[vel];
		strcpy_s(_proizvodjac, vel, proizvodjac);
		vel = strlen(model) + 1;
		_model = new char[vel];
		strcpy_s(_model, vel, model);
	}
	Uredjaj(const Uredjaj& u)
	{
		int vel = strlen(u._proizvodjac) + 1;
		_proizvodjac = new char[vel];
		strcpy_s(_proizvodjac, vel, u._proizvodjac);
		vel = strlen(u._model) + 1;
		_model = new char[vel];
		strcpy_s(_model, vel, u._model);
	}
	~Uredjaj() {
		delete[] _proizvodjac; _proizvodjac = nullptr;
		delete[] _model; _model = nullptr;
	}
	friend ostream& operator<<(ostream& COUT, const Uredjaj& obj) {
		COUT << obj._proizvodjac << "." << obj._model << endl;
		return COUT;
	}
};
class Printer:public Uredjaj {
	FITKolekcija<DatumVrijeme, Dokument> _printaniDokumenti;
	vector<string> _zabranjeneRijeci;
public:
	Printer(const char*proizvdjac,const char*model):Uredjaj(proizvdjac,model)
	{

	}
	Printer(const Printer& p) :Uredjaj(p)
	{
		_printaniDokumenti = p._printaniDokumenti;
		_zabranjeneRijeci = p._zabranjeneRijeci;
	}
	void DodajZabranjenuRijec(string rijec)
	{
		for (vector<string>::iterator i = _zabranjeneRijeci.begin(); i !=_zabranjeneRijeci.end(); i++)
		{
			if (rijec == *i)
				return;
		}
		_zabranjeneRijeci.push_back(rijec);
	}
	void Printaj(DatumVrijeme d, Dokument dokument)
	{
		_printaniDokumenti.Dodaj(d, dokument);
		if (!ProvjeriValidnostNazivaDokumenta(dokument.getNaziv()))
			throw exception("Naziv dokumenta ne ispunjava uslove");
		for (int i = 0; i < _zabranjeneRijeci.size(); i++)
		{
			if (regex_search(dokument.getSadrzaj(), regex(_zabranjeneRijeci[i])))
				throw exception("U dokumentu postoji zabranjena rijec");
		}
		cout << "Dokument"<<dokument.getNaziv()<<" se printa " << endl;

	}
	FITKolekcija<DatumVrijeme, Dokument>& GetPrintaniDokumenti() { return _printaniDokumenti; };
	vector<string>& GetZabranjeneRijeci() { return _zabranjeneRijeci; };
	float GetProsjecanBrojStranicaPoDatumu(DatumVrijeme d)
	{
		int ukupanBrojStranica = 0;
		int brojPrintanihStranica = 0;
		for (int i = 0; i < _printaniDokumenti.GetTrenutno(); i++)
		{
			if (d == _printaniDokumenti.GetT1()[i])
			{
				bool printaj = true;
				if (!ProvjeriValidnostNazivaDokumenta(_printaniDokumenti.GetT2()[i].getNaziv()))
					printaj = false;
				for (int j = 0; j < _zabranjeneRijeci.size(); j++)
				{
					if (regex_search(_printaniDokumenti.GetT2()[i].getSadrzaj(), regex(_zabranjeneRijeci[j])))
						printaj = false;
				}
				if (printaj)
				{
					brojPrintanihStranica += _printaniDokumenti.GetT2()[i].getBrojStranica();
					ukupanBrojStranica += _printaniDokumenti.GetT2()[i].getBrojStranica();
				}
				else
				{
					ukupanBrojStranica += _printaniDokumenti.GetT2()[i].getBrojStranica();
				}
			}
		}
		if (ukupanBrojStranica != 0)
			return brojPrintanihStranica / ukupanBrojStranica;
		return 0;
	}
	string GetTopZabranjenuRijec()
	{
		int naj_rijec = 0;
		int brojac = 0;
		vector<string>::iterator it = _zabranjeneRijeci.begin();
		for (vector<string>::iterator i = _zabranjeneRijeci.begin(); i != _zabranjeneRijeci.end(); i++)
		{
			brojac = 0;
			for (int j = 0; j < _printaniDokumenti.GetTrenutno(); j++)
			{
				if (regex_search(_printaniDokumenti.GetT2()[j].getSadrzaj(), regex(*i)))
				{
					regex r(*i);
					string napomena = _printaniDokumenti.GetT2()[j].getSadrzaj();
					auto start = sregex_iterator(napomena.begin(),napomena.end(), r);
					auto end = sregex_iterator();
					brojac += distance(start, end);
				}
			}
			if (brojac > naj_rijec)
			{
				naj_rijec = brojac;
				*it = *i;
			}
		}
		return *it;
	}
	void UkloniDokumente()
	{
		bool ukloni = false;
		FITKolekcija<DatumVrijeme, Dokument> temp;
		for (int i = 0; i < _printaniDokumenti.GetTrenutno(); i++)
		{
			if (!ProvjeriValidnostNazivaDokumenta(_printaniDokumenti.GetT2()[i].getNaziv()))
				ukloni = true;
			for (vector<string>::iterator j = _zabranjeneRijeci.begin(); j !=_zabranjeneRijeci.end(); j++)
			{
				if (regex_search(_printaniDokumenti.GetT2()[i].getSadrzaj(), regex(*j)))
					ukloni = true;
			}
			if (!ukloni)
			{
				temp.Dodaj(_printaniDokumenti.GetT1()[i], _printaniDokumenti.GetT2()[i]);
			}
		}
		_printaniDokumenti = temp;
	}
	friend ostream& operator<<(ostream& cout, Printer& p)
	{
		cout << static_cast<Uredjaj>(p);
		cout << "Printani dokumenti -> " << endl;
		for (int i = 0; i < p._printaniDokumenti.GetTrenutno(); i++)
		{
			cout << p._printaniDokumenti.GetT2()[i].getNaziv() << endl;
		}
		cout << "Zabranjene rijeci -> " << endl;
		for (int i = 0; i < p._zabranjeneRijeci.size(); i++)
		{
			cout << p._zabranjeneRijeci[i] << endl;
		}
		return cout;
	}
};

void main()
{
	/****************************************************************************
	1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
	2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR ĆE BITI OZNACENO KAO "RE"
	3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJEČILO GUBLJENJE URAĐENOG ZADATKA
	4. PROGRAMSKI CODE SE TAKOĐER NALAZI U FAJLU CODE.TXT
	5. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTIČNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLUČAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMOĆNE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
	6. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNAČENO.
	****************************************************************************/

#pragma region TestiranjeDatumVrijeme
	DatumVrijeme danas(1, 2, 2017, 10, 15);
	DatumVrijeme sutra(danas);
	DatumVrijeme prekosutra;
	prekosutra = danas;
	cout << danas << endl << sutra << endl << prekosutra << crt;
#pragma endregion
#pragma region FITKolekcija
	int v6 = 6, v13 = 13, v32 = 32, v63 = 63, v98 = 98, v109 = 109, v196 = 196;

	FITKolekcija<int, int> brojevi;
	brojevi.Dodaj(v196, v6);
	brojevi.Dodaj(v13, v32);
	brojevi.Dodaj(v98, v196);
	brojevi.Dodaj(v63, v13);
	brojevi.Dodaj(v98, v196);
	brojevi.Dodaj(v196, v6);

	cout << brojevi << crt;
	//SORTIRANJE ČLANOVA KOLEKCIJE SE VRŠI U RASTUĆEM REDOSLIJEDU NA OSNOVU VRIJEDNOSTI ELEMENTA TIPA T1
	brojevi.Sortiraj();
	cout << brojevi << crt;
	//BROJ 2 SE ODNOSI NA LOKACIJU/INDEKS UNUTAR LISTE NA KOJI JE POTREBNO DODATI NOVE ELEMENTE
	brojevi.DodajNaLokaciju(v109, v6, 2);
	cout << brojevi << crt;
	brojevi.Sortiraj();
	cout << brojevi << crt;
	/*METODA GetJedinstveni VRAĆA LISTU JEDINSTVENIH ELEMENATA TJ. 
	ELEMENATA KOJI NE SADRŽE DUPLIKATE (POJAM DUPLIKAT SE ODNOSI NA ISTE VRIJEDNOSTI ELEMENATA T1 I T2). 
	ELEMENTI KOJI SE DUPLIRAJU SE U OVOJ LISTI TREBAJU POJAVITI SAMO JEDNOM.*/
	FITKolekcija<int, int>* jedinstveni = brojevi.GetJedinstveni();
	cout << *jedinstveni << crt;
	*jedinstveni = brojevi;
	cout << *jedinstveni << crt;

	Dokument ispitPRIII(DOC, "ispitPRIII.doc");
	//BROJ STRANICA DOKUMENTA SE AUTOMATSKI ODREĐUJE PRILIKOM DODAVANJA SADRŽAJA. ZA POTREBE ISPITA PRETPOSTAVLJAMO DA NA 
	//JEDNU STRANICU MOŽE STATI 30 ZNAKOVA UKLJUČUJUĆI I RAZMAKE
	ispitPRIII.DodajSadrzaj("NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR ĆE BITI OZNACENO KAO ");
	cout << "Broj stranica -> " << ispitPRIII.GetBrojStranica() << endl;
	Dokument ispitBaze(DOC, "ispitBaze.doc");
	ispitBaze.DodajSadrzaj("PROGRAMSKI CODE SE TAKOĐER NALAZI U FAJLU CODE.TXT");
	cout << ispitBaze << endl;//ISPISUJE SVE DOSTUPNE PODATKE O DOKUMENTU

	Printer hp3200("HP", "3200");
	//PRINTER NEĆE DOZVOLITI PRINTANJE DOKUMENATA U ČIJEM SADRŽAJU SE NALAZI NEKA OD ZABRANJENIH RIJEČI
	hp3200.DodajZabranjenuRijec("RE");// :)
	hp3200.DodajZabranjenuRijec("RAT");
	hp3200.DodajZabranjenuRijec("UBITI");
	hp3200.DodajZabranjenuRijec("RE");// ONEMOGUĆITI PONAVLJANJE ZABRANJENIH RIJEČI, KORISTITI ITERATORE
	hp3200.DodajZabranjenuRijec("MRZITI");
	try
	{
		/*
		DA BI PRINTER ISPRINTAO NEKI DOKUMENT MORAJU BITI ZADOVOLJENA SLJEDEĆA PRAVILA:
		1. NAZIV DOKUMENTA MORA BITI U SLJEDEĆEM FORMATU npr: ispitPRIII.doc
		NAZIV DOKUMENTA MOŽE SADRŽAVATI SAMO SLOVA (NAJMANJE 5, NAJVIŠE 15), A EKSTENZIJA MOŽE
		BITI SAMO NEKA OD DOZVOLJENIH VRSTOMDOKUMENTA
		2. SADRŽAJ DOKUMENTA U SEBI NE SMIJE POSJEDOVATI NITI JEDNU ZABRANJENU RIJEČ
		UKOLIKO NEKI OD NAVEDENIH USLOVA NIJE ZADOVOLJEN FUNKCIJA TREBA DA BACI EXCEPTION SA
		ODGOVARAJUĆOM PORUKOM, ALI ĆE DOKUMENT BITI POHRANJEN U KOLEKCIJU _printaniDokumenti.
		UKOLIKO DOKUMENT ISPUNJAVA SVE USLOVE ZA PRINTANJE POTREBNO JE NA KONZOLU ISPISATI
		SADRŽAJ DOKUMENTA KOJI SE PRINTA
		*/
		hp3200.Printaj(danas, ispitPRIII);
		hp3200.Printaj(danas, ispitBaze);

		/*
		IMPLEMENTIRATI PRINTANJE U ZASEBNIM NITIMA UZ KORIŠTENJE sleep_for FUNKCIJE
		VODITI RAČUNA O DIJELJENJU ZAJEDNIČKIH RESURSA
		*/

	}
	catch (exception & err)
	{
		cout << err.what() << endl;
	}

	//KOD POREĐENJA DATUMA PRINTANJA NIJE POTREBNO POREDITI MINUTE, SAMO DATUM I SATE
	cout << "Prosjecan broj printanih stranica za " << danas << " je -> " << hp3200.GetProsjecanBrojStranicaPoDatumu(danas) << crt;
	cout << "Najcesce koristena zabranjena rijec je -> " << hp3200.GetTopZabranjenuRijec() << crt;

	Printer hp4000(hp3200);
	cout << "Prosjecan broj printanih stranica za " << danas << " je -> " << hp4000.GetProsjecanBrojStranicaPoDatumu(danas) << crt;
	cout << "Najcesce koristena zabranjena rijec je -> " << hp4000.GetTopZabranjenuRijec() << crt;
	hp4000.UkloniDokumente();//UKLANJA SVE DOKUMENTE KOJI NISU ZADOVOLJILI USLOVE ZA PRINTANJE
	cout << hp4000 << crt;

#pragma endregion
}