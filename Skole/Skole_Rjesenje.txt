#include<iostream>
#include<fstream>
#include<ctime>
#include<iomanip>
#include<regex>
#include<exception>
#include<mutex>
#include<vector>
#include<thread>
#include<sstream>
#include<string>
using namespace std;

/****************************************************************************
1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR ĆE BITI OZNACENO KAO "RE"
3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJEČILO GUBLJENJE URAĐENOG ZADATKA
4. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTIČNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLUČAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMOĆNE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
5. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNAČENO.
****************************************************************************/

const char* nedozvoljena_operacija = "Nedozvoljena operacija";
const char* not_set = "NOT_SET";

enum Sortiranje { ASC, DESC };
enum Predmet { MATEMATIKA, FIZIKA, HEMIJA, GEOGRAFIJA, NOT_SET };
enum Razred { I = 1, II, III, IV };
ostream& operator<<(ostream& cout, const Predmet& p)
{
	if (p == MATEMATIKA)
		cout << "MATEMATIKA";
	else if (p == FIZIKA)
		cout << "FIZIKA";
	else if (p == HEMIJA)
		cout << "HEMIJA";
	else if (p == GEOGRAFIJA)
		cout << "GEOGRAFIJA";
	return cout;
}
ostream& operator<<(ostream& cout, const Razred& r)
{
	if (r == I)
		cout << "1";
	else if (r == II)
		cout << "2";
	else if (r == III)
		cout << "III";
	else if (r == IV)
		cout << "IV";
	return cout;
}
char* AlocirajNizKaraktera(const char* sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}
template <class T1, class T2, int max>
class Kolekcija {
	T1* _elementi1[max] = { nullptr };
	T2* _elementi2[max] = { nullptr };
	int _trenutnoElemenata;
	bool _dozvoliDupliranje;
	Sortiranje _sortiranje;
public:
	Kolekcija(Sortiranje sortiranje = ASC, bool dozvoliDupliranje = true) {
		_trenutnoElemenata = 0;
		_sortiranje = sortiranje;
		_dozvoliDupliranje = dozvoliDupliranje;
	}
	Kolekcija(const Kolekcija& k)
	{
		_trenutnoElemenata = k._trenutnoElemenata;
		_dozvoliDupliranje = k._dozvoliDupliranje;
		_sortiranje = k._sortiranje;
		for (int i = 0; i < _trenutnoElemenata; i++)
		{
			_elementi1[i] = new T1(*k._elementi1[i]);
			_elementi2[i] = new T2(*k._elementi2[i]);
		}
	}
	Kolekcija& operator=(const Kolekcija& k)
	{
		if (this != &k)
		{
			_trenutnoElemenata = k._trenutnoElemenata;
			_dozvoliDupliranje = k._dozvoliDupliranje;
			_sortiranje = k._sortiranje;
			for (size_t i = 0; i < _trenutnoElemenata; i++) {
				delete _elementi1[i]; _elementi1[i] = nullptr;
				delete _elementi2[i]; _elementi2[i] = nullptr;
			}
			for (int i = 0; i < _trenutnoElemenata; i++)
			{
				_elementi1[i] = new T1(*k._elementi1[i]);
				_elementi2[i] = new T2(*k._elementi2[i]);
			}
		}
		return *this;
	}
	~Kolekcija() {
		for (size_t i = 0; i < _trenutnoElemenata; i++) {
			delete _elementi1[i]; _elementi1[i] = nullptr;
			delete _elementi2[i]; _elementi2[i] = nullptr;
		}
	}
	int GetTrenutno() const { return _trenutnoElemenata; }
	int GetMax() const { return max; }

	T1& GetElement1(int lokacija) const {
		if (lokacija < 0 || lokacija >= _trenutnoElemenata)
			throw exception(nedozvoljena_operacija);
		return *_elementi1[lokacija];
	}
	T2& GetElement2(int lokacija) const {
		if (lokacija < 0 || lokacija >= _trenutnoElemenata)
			throw exception(nedozvoljena_operacija);
		return *_elementi2[lokacija];
	}
	void AddElement(T1 el1,T2 el2)
	{
		if (max==_trenutnoElemenata)
			throw exception("Nema vise mjesta u kolekciji");
		if (!_dozvoliDupliranje)
		{
			for (int i = 0; i < _trenutnoElemenata; i++)
			{
				if (*_elementi1[i] ==el1 && *_elementi2[i] == el2)
					throw exception("Dupliranje nije dozvoljeno");
			}
		}
		_elementi1[_trenutnoElemenata] = new T1(el1);
		_elementi2[_trenutnoElemenata] = new T2(el2);
		_trenutnoElemenata++;
		if (_trenutnoElemenata >= 2)
			Sortiraj(_sortiranje);
	}
	void Sortiraj(Sortiranje s)
	{
		bool promjena = true;
		while (promjena)
		{
			promjena = false;
			for (int i = 0; i < _trenutnoElemenata-1; i++)
			{
				if (s == ASC && *_elementi1[i] > *_elementi1[i + 1])
				{
					swap(*_elementi1[i], *_elementi1[i + 1]);
					swap(*_elementi2[i], *_elementi2[i + 1]);
					promjena = true;
				}
				else if (s == DESC && *_elementi1[i] < *_elementi1[i + 1])
				{
					swap(*_elementi1[i], *_elementi1[i + 1]);
					swap(*_elementi2[i], *_elementi2[i + 1]);
					promjena = true;
				}
			}
		}
	}
	void SetElement2(int lokacija, T2 ele2) {
		_elementi2[lokacija] = ele2;
	}
	friend ostream& operator<<(ostream& COUT, const Kolekcija& obj) {
		for (size_t i = 0; i < obj.GetTrenutno(); i++)
			COUT << obj.GetElement1(i) << " " << obj.GetElement2(i) << endl;
		return COUT;
	}
};

class Aktivnost {
	shared_ptr<Razred> _razred;
	string _opis;
	int _ocjena;//1-5
public:
	Aktivnost(Razred razred = I, int ocjena = 0, string opis = not_set) {
		_ocjena = ocjena;
		_opis = opis;
		_razred = make_shared<Razred>(razred);
	}
	int  GetOcjenu() const { return _ocjena; }
	string GetOpis() const { return _opis; }
	Razred GetRazred() const { return *_razred; }
	bool operator==(const Aktivnost& a)
	{
		return _opis == a._opis;
	}
	friend ostream& operator<<(ostream& COUT, const Aktivnost& obj) {
		COUT << *obj._razred << " " << obj._ocjena << " " << obj._opis << endl;
		return COUT;
	}
};
bool ProvjeriTelefon(string telefon)
{
	string pravilo = "(\\+387\\(61\\)\\d{3}\\-\\d{3})|(\\+387 61 \\d{3}\\-\\d{3})";
	if (regex_match(telefon, regex(pravilo)))
		return true;
	return false;
}
class Polaznik {
protected:
	char* _imePrezime;
	string _brojTelefona;
public:
	Polaznik(string imePrezime, string brojTelefona) : _imePrezime(AlocirajNizKaraktera(imePrezime.c_str())) {
		if (ProvjeriTelefon(brojTelefona))
			_brojTelefona = brojTelefona;
		else
			_brojTelefona = not_set;
	}
	Polaznik(const Polaznik& p)
	{
		_imePrezime = AlocirajNizKaraktera(p._imePrezime);
		_brojTelefona = p._brojTelefona;
	}
	~Polaznik() { delete[] _imePrezime; }
	char* GetImePrezime() { return _imePrezime; }
	string GetTelefon() { return _imePrezime; }
	virtual void PredstaviSe() = 0;
	friend ostream& operator<<(ostream& cout, const Polaznik& p)
	{
		cout << "Ime i prezime -> " << p._imePrezime << endl;
		cout << "Broj telefona -> " << p._brojTelefona << endl;
		return cout;
	}
};

class Ucenik:public Polaznik {
	Kolekcija<Predmet, Aktivnost, 16>* _aktivnosti;
public:
	Ucenik(string imePrezime, string brojTelefona) :Polaznik(imePrezime, brojTelefona)
	{
		_aktivnosti = new Kolekcija<Predmet, Aktivnost, 16>;
	}
	Ucenik(const Ucenik& u):Polaznik(u)
	{
		_aktivnosti = new Kolekcija<Predmet, Aktivnost, 16>(*u._aktivnosti);
	}
	~Ucenik() { delete _aktivnosti; _aktivnosti = nullptr; }
	Kolekcija<Predmet, Aktivnost, 16>& GetAktivnosti() { return *_aktivnosti; };
	void PredstaviSe()
	{

	}
	float prosjekOcjena(Razred r)
	{
		float prosjek = 0;
		for (int i = 0; i < _aktivnosti->GetTrenutno(); i++)
		{
			if (_aktivnosti->GetElement2(i).GetRazred() == r)
				prosjek += _aktivnosti->GetElement2(i).GetOcjenu();
		}
		if (_aktivnosti->GetTrenutno() == 0)
			return 0;
		return prosjek / _aktivnosti->GetTrenutno();
	}
	float getProsjek()
	{
		float prosjek = 0;
		for (int i = 0; i < _aktivnosti->GetTrenutno(); i++)
		{
				prosjek += _aktivnosti->GetElement2(i).GetOcjenu();
		}
		if (_aktivnosti->GetTrenutno() == 0)
			return 0;
		return prosjek / _aktivnosti->GetTrenutno();
	}
	bool UspjesnostOcjena()
	{
		for (int i = 0; i < _aktivnosti->GetTrenutno(); i++)
		{
			if (_aktivnosti->GetElement2(i).GetOcjenu() == 1)
				return false;
		}
		return true;
	}
	friend ostream& operator<<(ostream& COUT, Ucenik& n)
	{
		COUT << static_cast<Polaznik&>(n);
		COUT << *n._aktivnosti << endl;
		return COUT;
	}
};
const char* crt = "\n---------------------------------------------------\n";
mutex m;
class Skola {
	char* _naziv;
	vector<Ucenik> _ucenici;
	void SaljiMail(float prosjek,Razred r)
	{
		m.lock();
		cout << "Uspjesno ste okoncali aktivnost sa prosjekom " << prosjek << " na nivou razreda " << r << endl;
		m.unlock();
	}
public:
	Skola(const char* naziv = nullptr) {
		_naziv = AlocirajNizKaraktera(naziv);
	}
	~Skola() {
		delete[] _naziv; _naziv = nullptr;
	}
	char* GetNaziv()const { return _naziv; }
	vector<Ucenik>& GetUcenici() { return _ucenici; };
	void operator()(string imePrezime, string brojTelefona)
	{
		for (int i = 0; i < _ucenici.size(); i++)
		{
			if (strcmp(imePrezime.c_str(), _ucenici[i].GetImePrezime()) == 0 || brojTelefona == _ucenici[i].GetTelefon())
				throw exception("Postoji ucenik ili broj telefona");
		}
		Ucenik u(imePrezime, brojTelefona);
		_ucenici.push_back(u);
	}
	bool DodajAktivnost(string imePrezime, Predmet p, Aktivnost a)
	{
		for (int i = 0; i < _ucenici.size(); i++)
		{
			if (strcmp(imePrezime.c_str(), _ucenici[i].GetImePrezime()) == 0)
			{
				for (int j = 0; j < _ucenici[i].GetAktivnosti().GetTrenutno(); j++)
				{
					if (_ucenici[i].GetAktivnosti().GetElement2(j).GetRazred() == a.GetRazred())
					{
						if (_ucenici[i].GetAktivnosti().GetTrenutno() >= 4)
							return false;
						if (_ucenici[i].GetAktivnosti().GetElement1(i) == p /*&& _ucenici[i].GetAktivnosti().GetElement2(j) == a*/)
							return false;
						_ucenici[i].GetAktivnosti().AddElement(p, a);
						if (_ucenici[i].GetAktivnosti().GetTrenutno() == 4 && _ucenici[i].UspjesnostOcjena() && _ucenici[i].GetTelefon() != not_set)
						{
							thread t(&Skola::SaljiMail, this, _ucenici[i].prosjekOcjena(a.GetRazred()), a.GetRazred());
							t.join();
						}
						return true;
					}
				}
				_ucenici[i].GetAktivnosti().AddElement(p, a);
				return true;
			}
		}
		return false;
	}
	pair<Polaznik*, float>GetNajboljegUcenika()
	{
		float naj_prosjek=0;
		int indeks = 0;
		for (int i = 0; i < _ucenici.size(); i++)
		{
			if (_ucenici[i].getProsjek() > naj_prosjek)
			{
				naj_prosjek = _ucenici[i].getProsjek();
				indeks = i;
			}
		}
		return make_pair(&_ucenici[indeks], naj_prosjek);
	}
	bool SpasiUFajl(string nazivFajla,bool trebaBrisati=false)
	{
		ofstream upis;
		if (!trebaBrisati)
		{
			if (upis.fail())
				return false;
			upis.open(nazivFajla, ios::app);
			upis << *this << crt;
			upis.close();
			return true;
		}
		else {
			if (upis.fail())
				return false;
			upis.open(nazivFajla, ios::out);
			upis << *this << crt;
			upis.close();
			return true;
		}
	}
	friend ostream& operator<<(ostream& COUT, Skola& obj) {
		COUT << "Skola: " << obj._naziv << endl;
		COUT << "Ucenici: " << endl;
		for (size_t i = 0; i < obj._ucenici.size(); i++)
			COUT << obj._ucenici[i] << endl;
		return COUT;
	}
};

int main() {
	Kolekcija<int, int, 10> kolekcija1(DESC, false);
	try {
		kolekcija1.AddElement(1, 2);
		//dupliranje elemenata nije dozvoljeno
		kolekcija1.AddElement(1, 2);
	}
	catch (exception & ex) {
		cout << ex.what();
	}

	/*nakon svakog dodavanja, elemente sortirati prema T1 i vrijednosti atributa _sortiranje*/
	for (size_t i = 1; i < kolekcija1.GetMax() - 1; i++)
		kolekcija1.AddElement(i+52, i+65);

	cout << kolekcija1 << endl;

	try {
		//prekoracen maksimalan broj elemenata
		kolekcija1.AddElement(rand(), rand());
	}
	catch (exception & ex) {
		cout << ex.what();
	}
	cout << kolekcija1 << endl;

	Kolekcija<int, int, 10> kolekcija2(kolekcija1);
	cout << kolekcija2 << endl;

	Skola gimnazijaMostar("GIMNAZIJA MOSTAR");
	//dodaje novog ucenika u skolu
	gimnazijaMostar("Jasmin Azemovic", "+387(61)111-222");
	gimnazijaMostar("Adel Handzic", "+387(61)333-444");

	/*
	koristeci regex, osigurati sljedeci format za broj telefona: +387(6X)XXX-XXX ili +387 6X XXX-XXX
	onemoguciti pojavljivanje samo jedne zagrade, a ukoliko format nije adekvatna koristiti vrijednost not_set
	*/
	gimnazijaMostar("Telefon NotValidFormat", "387 61)333-444");

	try
	{
		/*onemoguciti dodavanje ucenika sa istim imenom i prezimenom ili brojem telefona*/
		gimnazijaMostar("Adel Handzic", "+387(61)333-444");
	}
	catch (exception & ex)
	{
		cout << ex.what() << endl;
	}

	if (gimnazijaMostar.DodajAktivnost("Jasmin Azemovic", MATEMATIKA, Aktivnost(I, 4, "Priprema za takmicenje iz Matematije koje se odrzava u Konjicu 07.02.2019")))
		cout << "Aktivnost uspjesno dodana" << endl;
	/*na nivou svakog razreda se mogu evidentirati maksimalno 4 aktivnosti,
	a takodjer, na nivou razreda se ne smiju ponavljati aktivnosti iz istog predmeta*/
	if (!gimnazijaMostar.DodajAktivnost("Jasmin Azemovic", MATEMATIKA, Aktivnost(I, 4, "Aktivnosti iz matematike")))
		cout << "Aktivnost nije uspjesno dodana" << endl;
	if (gimnazijaMostar.DodajAktivnost("Jasmin Azemovic", HEMIJA, Aktivnost(I, 5, "Priprema otopina za vjezbe iz predmeta Hemija")))
		cout << "Aktivnost uspjesno dodana" << endl;
	if (gimnazijaMostar.DodajAktivnost("Jasmin Azemovic", FIZIKA, Aktivnost(I, 4, "Analiza stepena apsorpcije materijala ")))
		cout << "Aktivnost uspjesno dodana" << endl;
	/*u slucaju da je ucenik uspjesno (ocjenom vecom od 1) realizovao aktivnosti na nivou odredjenog razreda, 
	te posjeduje validan broj telefona,
	u okviru zasebnog thread-a se salje SMS sa sadrzajem 
	"Uspjesno ste okoncali aktivnosti u okviru X razreda sa prosjecnom ocjenom X.X"*/
	if (gimnazijaMostar.DodajAktivnost("Jasmin Azemovic", GEOGRAFIJA, Aktivnost(I, 4, "Izrada 5 reljefa Mostara")))
		cout << "Aktivnost uspjesno dodana" << endl;
	if (gimnazijaMostar.DodajAktivnost("Adel Handzic", MATEMATIKA, Aktivnost(I, 5, "Izrada skripte na temu integralni racun")))
		cout << "Aktivnost uspjesno dodana" << endl;

	////ispisuje sve ucenike i njihove aktivnosti
	cout << gimnazijaMostar << endl;


	pair<Polaznik*, float> par = gimnazijaMostar.GetNajboljegUcenika();
	cout << "Najbolji ucenik je " << par.first->GetImePrezime() << " sa prosjekom " << par.second << endl;

	/*U fajl (npr. Gimnazija.txt) upisati podatke (podatke upisati kao obicni tekst) o skoli i svim ucenicima.
	Nakon upisa, potrebno je ispisati sadrzaj fajla. Parametar tipa bool oznacava da li ce ranije dodani sadrzaj fajla prethodno biti pobrisan*/

	if (gimnazijaMostar.SpasiUFajl("Gimnazija.txt"))
		cout << "Podaci o ucenicima uspjesno pohranjeni u fajl" << endl;
	if (gimnazijaMostar.SpasiUFajl("Gimnazija.txt", true))
		cout << "Podaci o ucenicima uspjesno pohranjeni u fajl" << endl;

	cin.get();
	system("pause>0");
	return 0;
}